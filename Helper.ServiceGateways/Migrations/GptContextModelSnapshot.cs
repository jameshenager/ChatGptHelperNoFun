// <auto-generated />
using System;
using Helper.ServiceGateways;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Helper.ServiceGateways.Migrations
{
    [DbContext(typeof(GptContext))]
    partial class GptContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Helper.ServiceGateways.Models.ActionItem", b =>
                {
                    b.Property<int>("ActionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActionItemScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QueryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ActionItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QueryId");

                    b.ToTable("ActionItems");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ActionItemAudit", b =>
                {
                    b.Property<int>("ActionItemAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OperationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ActionItemAuditId");

                    b.ToTable("ActionItemAudits");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ActionItemDependency", b =>
                {
                    b.Property<int>("ActionItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DependsOnActionItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActionItemId", "DependsOnActionItemId");

                    b.HasIndex("DependsOnActionItemId");

                    b.ToTable("ActionItemDependencies");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ActionItemSchedule", b =>
                {
                    b.Property<int>("ActionItemScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionItemId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ActionItemScheduleId");

                    b.ToTable("ActionItemSchedules");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResponseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnswerId");

                    b.HasIndex("ResponseId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ApiInformation", b =>
                {
                    b.Property<int>("ApiInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ApiInformationId");

                    b.ToTable("ApiInformations");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.EmbedResult", b =>
                {
                    b.Property<int>("EmbedThingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Vector")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("EmbedThingId");

                    b.ToTable("EmbedResults");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ImageQuery", b =>
                {
                    b.Property<int>("ImageQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageQueryText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ImageQueryId");

                    b.ToTable("ImageQueries");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ImageResult", b =>
                {
                    b.Property<int>("ImageResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ImageBlob")
                        .HasColumnType("BLOB");

                    b.Property<int>("ImageQueryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageResultId");

                    b.HasIndex("ImageQueryId");

                    b.ToTable("ImageResults");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Query", b =>
                {
                    b.Property<int>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TokenCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("QueryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.QueryActionItem", b =>
                {
                    b.Property<int>("QueryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QueryId", "ActionItemId");

                    b.HasIndex("ActionItemId");

                    b.ToTable("QueryActionItem");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelUsed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QueryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TokenCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("ResponseId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ActionItem", b =>
                {
                    b.HasOne("Helper.ServiceGateways.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Helper.ServiceGateways.Models.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId");

                    b.Navigation("Category");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ActionItemDependency", b =>
                {
                    b.HasOne("Helper.ServiceGateways.Models.ActionItem", "ActionItem")
                        .WithMany("Dependencies")
                        .HasForeignKey("ActionItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Helper.ServiceGateways.Models.ActionItem", "DependsOnActionItem")
                        .WithMany("DependedOnBy")
                        .HasForeignKey("DependsOnActionItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActionItem");

                    b.Navigation("DependsOnActionItem");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ActionItemSchedule", b =>
                {
                    b.HasOne("Helper.ServiceGateways.Models.ActionItem", "ActionItem")
                        .WithOne("ActionItemSchedule")
                        .HasForeignKey("Helper.ServiceGateways.Models.ActionItemSchedule", "ActionItemScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionItem");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Answer", b =>
                {
                    b.HasOne("Helper.ServiceGateways.Models.Response", "Response")
                        .WithMany("Answers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ImageResult", b =>
                {
                    b.HasOne("Helper.ServiceGateways.Models.ImageQuery", "ImageQuery")
                        .WithMany("ImageResults")
                        .HasForeignKey("ImageQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageQuery");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Query", b =>
                {
                    b.HasOne("Helper.ServiceGateways.Models.Category", "Category")
                        .WithMany("Queries")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.QueryActionItem", b =>
                {
                    b.HasOne("Helper.ServiceGateways.Models.ActionItem", "ActionItem")
                        .WithMany("QueryActionItems")
                        .HasForeignKey("ActionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helper.ServiceGateways.Models.Query", "Query")
                        .WithMany("QueryActionItems")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionItem");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Response", b =>
                {
                    b.HasOne("Helper.ServiceGateways.Models.Query", "Query")
                        .WithOne("Response")
                        .HasForeignKey("Helper.ServiceGateways.Models.Response", "ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ActionItem", b =>
                {
                    b.Navigation("ActionItemSchedule");

                    b.Navigation("DependedOnBy");

                    b.Navigation("Dependencies");

                    b.Navigation("QueryActionItems");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Category", b =>
                {
                    b.Navigation("Queries");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.ImageQuery", b =>
                {
                    b.Navigation("ImageResults");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Query", b =>
                {
                    b.Navigation("QueryActionItems");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Helper.ServiceGateways.Models.Response", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
